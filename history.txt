[
  'db',
  'show databases;',
  'use school',
  'show db;',
  'show db',
  'show',
  'show collections',
  'students()',
  'db.school.find("age")',
  'db.school.find()',
  'db.school.find().pretty()',
  'db.school.countDocuments()',
  'show db;',
  'use students',
  'db.school.countDocuments()',
  'db.students.countDocuments()',
  'students.countDocuments()',
  'db.school.find().pretty()',
  'db.students.find().pretty()',
  'db.students.find()',
  'use db',
  'use school;',
  "db['students'].find(_)",
  "db['students'].find()",
  "db['students'].find().pretty()",
  "db['students'].find('age' : {$gt 18})",
  "db['students'].find(age : {$gt 18})",
  "db['students'].find({age : {$gt 18}})",
  "db['students'].find({age : {$gt: 18}})",
  'db.students.find({age : {$gt : 20}})',
  "db.students.find({gender:{$in:'Female'}})",
  "db.students.find({gender:{$in:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  'db.students.countDocuments({age : {$gt : 20}})',
  "db.students.countDocuments({gender:{$nin:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  "db.students.find({department:{$in :['Art']}})",
  "db.students.find({department:{$in :['Art','English']}})",
  "db.students.find({department:{$nin :['Art','English']}})",
  'db.students.find($and )',
  'db.students.find({$and : ([{age:22\x1D},{year:2}]) })',
  'db.students.find({$and : ([{age:22\x1D},{year:2}])',
  'db.students.find({$and : [{age: 22},{year:2}]})',
  'db.students.find({$or : [{age: 22},{year:2}]})',
  "db.students.find({gender : {$exists : 'Male'}})",
  'db.students.find({year : {$type : int}})',
  'db.students.find({year : {$type : "number"}})',
  'db.students.find({year : {$type : "array"}})',
  "db.students.find({grades : {$all : ['cs','math']}})",
  'db.students.find({grades : {$all : ["cs"]}})',
  'db.students.find({grades : {$all : ["cs","math","networking"]}})',
  'use todo',
  'db.todo.insertOne( {} ;',
  'db.todo.insertOne( { "task": "go gym", "category": "physical health", "date": new Date(), "deadline": "30-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne( { "task": "read book", "category": "mental health", "date": new Date(), "deadline": "30-05-2025", "status": "not done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "speak to friend", "category": "enjoyment", "date": new Date(), "deadline": "26-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "play CoC game", "category": "enjoyment", "date": new Date(), "deadline": "28-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne({ "task": "listen to a podcast", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "not done", "reminder": "yes" } )',
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}})",
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}}})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true}})",
  'db.todo.updateMany( { status: "not done" }, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertMany( [{ "task": "put petrol", "category": "must do", "date": new Date(), "deadline": "23-05-2025", "status": false, "reminder": "no" }, { "task": "buy fruits", "category": "must do", "date": new Date(), "deadline": "30-05-2025", "status": true, "reminder": "yes" }, { "task": "jump rops for 30 min", "category": "physical health", "date": new Date(), "deadline": "26-05-2025", "status": false, "reminder": "no" }] )',
  'db.todo.countDocuments()',
  'db.todo.find()',
  'history',
  'history()',
  'db.collection.updateMany(',
  '  {},',
  '  { $set: { active: false } }',
  ')',
  'db.todo.updateMany( {}, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.updateOne( {_id : "6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId"6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true}})',
  'db.todo.updateMany( {}, { $set: { "resent_update": new Date() } } )',
  'history()',
  'db.todo.find()',
  `db.todo.updateMany( {}, { $set: { "priority" : 'high' } } )`,
  `db.todo.updateMany( {}, { $set: { "priority" : 'urgent' } } )`,
  `db.todo.updateMany( {}, { $set: { "priority" : 'medium' } } )`,
  'db.runCommand({',
  '  collMod: "todo",',
  '  validator: {',
  '    $jsonSchema: {',
  '      bsonType: "object",',
  '      properties: {',
  '        priority: {',
  '          enum: ["low", "medium", "high"],',
  '          description: "priority must be one of: low, medium, high"',
  '        }',
  '      }',
  '    }',
  '  },',
  '  validationLevel: "moderate",  // validate new/updated documents only',
  '  validationAction: "error"     // reject invalid inserts/updates',
  '})',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes","priority" : "high" } )',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes","priority" : "urgent" } )',
  'history()',
  'db.todo.countDocuments()',
  'db.todo.find().sort()',
  'db.todo.updateMany( {}, { $set: { "duedate" : new Date()} } )',
  'db.todo.find( { duedate: { $in: Date() } } )',
  'db.todo.find( { duedate: { $in: [Date()] } } )',
  'db.todo.find( { duedate: { $eq: Date() } } )',
  'db.todo.find( { duedate: { $eq: new Date() } } )',
  'histroy()'
]
todo>
