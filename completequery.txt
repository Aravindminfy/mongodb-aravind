Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\Minfy.DESKTOP-3E50D5N> mongo
mongo : The term 'mongo' is not recognized as the name of a cmdlet, function, script file, or operable program. Check
the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ mongo
+ ~~~~~
    + CategoryInfo          : ObjectNotFound: (mongo:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\Minfy.DESKTOP-3E50D5N> mongosh
Current Mongosh Log ID: 6836cb5f59bf1d899e6c4bcf
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.5.1
Using MongoDB:          8.0.9
Using Mongosh:          2.5.1

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/


To help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy).
You can opt-out by running the disableTelemetry() command.

------
   The server generated these startup warnings when booting
   2025-05-28T12:25:32.556+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> db
test
test> show databases;
admin    48.00 KiB
config  108.00 KiB
local    40.00 KiB
school   40.00 KiB
test> use school
switched to db school
school> show db;
MongoshInvalidInputError: [COMMON-10001] 'db' is not a valid argument for "show".
school> show db
MongoshInvalidInputError: [COMMON-10001] 'db' is not a valid argument for "show".
school> show
MongoshInvalidInputError: [COMMON-10001] 'undefined' is not a valid argument for "show".
school> show collections
students
school> students()
ReferenceError: students is not defined
school> db.school.find("age")
MongoInvalidArgumentError: Query filter must be a plain object or ObjectId
school> db.school.find()

school> db.school.find().pretty()

school> db.school.countDocuments()
0
school> show db;
MongoshInvalidInputError: [COMMON-10001] 'db' is not a valid argument for "show".
school> use students
switched to db students
students> db.school.countDocuments()
0
students> db.students.countDocuments()
0
students> students.countDocuments()
ReferenceError: students is not defined
students> db.school.find().pretty()

students> db.students.find().pretty()

students> db.students.find()

students> use db
switched to db db
db> use school;
switched to db school
school> db['students'].find(_)
MongoInvalidArgumentError: Query filter must be a plain object or ObjectId
school> db['students'].find()
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2d'),
    student_id: 3,
    name: 'Charlie Lee',
    age: 19,
    gender: 'Male',
    department: 'Electrical Engineering',
    year: 1,
    grades: { math: 91, circuits: 84, english: 76 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d37'),
    student_id: 13,
    name: 'Mike Scott',
    age: 19,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 1,
    grades: { mechanics: 70, math: 75, physics: 73 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school>

school>

school>

school> db['students'].find().pretty()
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2d'),
    student_id: 3,
    name: 'Charlie Lee',
    age: 19,
    gender: 'Male',
    department: 'Electrical Engineering',
    year: 1,
    grades: { math: 91, circuits: 84, english: 76 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d37'),
    student_id: 13,
    name: 'Mike Scott',
    age: 19,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 1,
    grades: { mechanics: 70, math: 75, physics: 73 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db['students'].find('age' : {$gt 18})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:26)

> 1 | db['students'].find('age' : {$gt 18})
    |                           ^
  2 |

school> db['students'].find(age : {$gt 18})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:24)

> 1 | db['students'].find(age : {$gt 18})
    |                         ^
  2 |

school> db['students'].find({age : {$gt 18}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:32)

> 1 | db['students'].find({age : {$gt 18}})
    |                                 ^
  2 |

school> db['students'].find({age : {$gt: 18}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2d'),
    student_id: 3,
    name: 'Charlie Lee',
    age: 19,
    gender: 'Male',
    department: 'Electrical Engineering',
    year: 1,
    grades: { math: 91, circuits: 84, english: 76 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d37'),
    student_id: 13,
    name: 'Mike Scott',
    age: 19,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 1,
    grades: { mechanics: 70, math: 75, physics: 73 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.find({age : {$gt : 20}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.find({gender:{$in:'Female'}})
MongoServerError[BadValue]: $in needs an array
school> db.students.find({gender:{$in:['Female']}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.countDocuments({gender:{$in:['Female']}})
10
school> db.students.countDocuments({age : {$gt : 20}})
11
school> db.students.countDocuments({gender:{$nin:['Female']}})
10
school> db.students.countDocuments({gender:{$in:['Female']}})
10
school> db.students.find({department:{$in :['Art']}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  }
]
school> db.students.find({department:{$in :['Art','English']}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  }
]
school> db.students.find({department:{$nin :['Art','English']}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2d'),
    student_id: 3,
    name: 'Charlie Lee',
    age: 19,
    gender: 'Male',
    department: 'Electrical Engineering',
    year: 1,
    grades: { math: 91, circuits: 84, english: 76 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d37'),
    student_id: 13,
    name: 'Mike Scott',
    age: 19,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 1,
    grades: { mechanics: 70, math: 75, physics: 73 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.find($and )
ReferenceError: $and is not defined
school> db.students.find({$and : ([{age:22},{year:2}]) })
Uncaught:
SyntaxError: Unexpected character ''. (1:34)

> 1 | db.students.find({$and : ([{age:22},{year:2}]) })
    |                                   ^
  2 |

school> db.students.find({$and : ([{age:22},{year:2}])
Uncaught:
SyntaxError: Unexpected character ''. (1:34)

> 1 | db.students.find({$and : ([{age:22},{year:2}])
    |                                   ^
  2 |

school> db.students.find({$and : [{age: 22},{year:2}]})

school> db.students.find({$or : [{age: 22},{year:2}]})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.find({gender : {$exists : 'Male'}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2d'),
    student_id: 3,
    name: 'Charlie Lee',
    age: 19,
    gender: 'Male',
    department: 'Electrical Engineering',
    year: 1,
    grades: { math: 91, circuits: 84, english: 76 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d37'),
    student_id: 13,
    name: 'Mike Scott',
    age: 19,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 1,
    grades: { mechanics: 70, math: 75, physics: 73 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.find({year : {$type : int}})
ReferenceError: int is not defined
school> db.students.find({year : {$type : "number"}})
[
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2b'),
    student_id: 1,
    name: 'Alice Johnson',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { math: 85, english: 78, cs: 92 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2c'),
    student_id: 2,
    name: 'Bob Smith',
    age: 22,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 3,
    grades: { math: 73, physics: 88, mechanics: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2d'),
    student_id: 3,
    name: 'Charlie Lee',
    age: 19,
    gender: 'Male',
    department: 'Electrical Engineering',
    year: 1,
    grades: { math: 91, circuits: 84, english: 76 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2e'),
    student_id: 4,
    name: 'Diana Perez',
    age: 21,
    gender: 'Female',
    department: 'Business',
    year: 3,
    grades: { economics: 88, accounting: 90, marketing: 75 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d2f'),
    student_id: 5,
    name: 'Ethan Brown',
    age: 20,
    gender: 'Male',
    department: 'Computer Science',
    year: 2,
    grades: { math: 80, cs: 87, english: 72 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d30'),
    student_id: 6,
    name: 'Fiona Green',
    age: 22,
    gender: 'Female',
    department: 'Mathematics',
    year: 3,
    grades: { algebra: 95, calculus: 89, stats: 90 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d31'),
    student_id: 7,
    name: 'George White',
    age: 21,
    gender: 'Male',
    department: 'Physics',
    year: 3,
    grades: { physics: 85, math: 82, research: 78 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d32'),
    student_id: 8,
    name: 'Hannah Moore',
    age: 19,
    gender: 'Female',
    department: 'Chemistry',
    year: 1,
    grades: { chemistry: 91, lab: 88, math: 79 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d33'),
    student_id: 9,
    name: 'Ian Black',
    age: 20,
    gender: 'Male',
    department: 'History',
    year: 2,
    grades: { history: 84, writing: 77, philosophy: 70 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d34'),
    student_id: 10,
    name: 'Jenna Adams',
    age: 21,
    gender: 'Female',
    department: 'Psychology',
    year: 3,
    grades: { psych: 89, statistics: 85, writing: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d35'),
    student_id: 11,
    name: 'Kyle Davis',
    age: 22,
    gender: 'Male',
    department: 'Economics',
    year: 4,
    grades: { economics: 90, finance: 87, math: 85 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d36'),
    student_id: 12,
    name: 'Laura Thomas',
    age: 20,
    gender: 'Female',
    department: 'Computer Science',
    year: 2,
    grades: { cs: 93, math: 88, english: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d37'),
    student_id: 13,
    name: 'Mike Scott',
    age: 19,
    gender: 'Male',
    department: 'Mechanical Engineering',
    year: 1,
    grades: { mechanics: 70, math: 75, physics: 73 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d38'),
    student_id: 14,
    name: 'Nina King',
    age: 21,
    gender: 'Female',
    department: 'Biology',
    year: 3,
    grades: { bio: 85, chemistry: 78, research: 82 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d39'),
    student_id: 15,
    name: 'Omar Lewis',
    age: 23,
    gender: 'Male',
    department: 'Law',
    year: 4,
    grades: { law: 88, ethics: 90, writing: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3a'),
    student_id: 16,
    name: 'Paula Young',
    age: 20,
    gender: 'Female',
    department: 'Art',
    year: 2,
    grades: { painting: 92, history: 85, design: 89 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3b'),
    student_id: 17,
    name: 'Quentin Hall',
    age: 22,
    gender: 'Male',
    department: 'Physics',
    year: 4,
    grades: { physics: 91, math: 88, research: 86 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3c'),
    student_id: 18,
    name: 'Rachel Allen',
    age: 19,
    gender: 'Female',
    department: 'English',
    year: 1,
    grades: { literature: 84, writing: 90, grammar: 88 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3d'),
    student_id: 19,
    name: 'Steve Martinez',
    age: 21,
    gender: 'Male',
    department: 'Computer Science',
    year: 3,
    grades: { cs: 85, math: 82, networking: 80 }
  },
  {
    _id: ObjectId('6836b49745c8b47cd31d4d3e'),
    student_id: 20,
    name: 'Tina Robinson',
    age: 22,
    gender: 'Female',
    department: 'Philosophy',
    year: 4,
    grades: { logic: 87, ethics: 83, philosophy: 89 }
  }
]
school> db.students.find({year : {$type : "array"}})

school> db.students.find({grades : {$all : ['cs','math']}})

school> db.students.find({grades : {$all : ["cs"]}})

school> db.students.find({grades : {$all : ["cs","math","networking"]}})

school> db.students.find({grades : {$all : ["cs","math","networking"]}})

school> db.students.find({grades : {$all : ["cs","math","networking"]}})

school>

school>

school>

school>

school>

school>

school> use todo
switched to db todo
todo>

todo>

todo>

todo>

todo>

todo> db.todo.insertOne(
... {}
...
... ;
Uncaught:
SyntaxError: Unexpected token, expected "," (4:0)

  2 | {}
  3 |
> 4 | ;
    | ^
  5 |

todo> db.todo.insertOne(
... {
... "task" : "go gym",
... "category" : "physical health",
... "date" : new Date(),
... "deadline" : "30-05-2025",
... "status" : "done",
... "reminder" : "yes",
... }
... )
{
  acknowledged: true,
  insertedId: ObjectId('6836e1ae59bf1d899e6c4bd0')
}
todo> db.todo.insertOne( { "task": "read book", "category": "mental health", "date": new Date(), "deadline": "30-05-2025", "status": "not done", "reminder": "no" } )
{
  acknowledged: true,
  insertedId: ObjectId('6836e1e059bf1d899e6c4bd1')
}
todo> db.todo.insertOne( { "task": "speak to friend", "category": "enjoyment", "date": new Date(), "deadline": "26-05-2025", "status": "done", "reminder": "no" } )
{
  acknowledged: true,
  insertedId: ObjectId('6836e21e59bf1d899e6c4bd2')
}
todo> db.todo.insertOne( { "task": "play CoC game", "category": "enjoyment", "date": new Date(), "deadline": "28-05-2025", "status": "done", "reminder": "no" } )
{
  acknowledged: true,
  insertedId: ObjectId('6836e23759bf1d899e6c4bd3')
}
todo> db.todo.find()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: 'done',
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: 'not done',
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: 'done',
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: 'done',
    reminder: 'no'
  }
]
todo>

todo>

todo>

todo>

todo>

todo> db.todo.insertOne( { "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" }
... )
{
  acknowledged: true,
  insertedId: ObjectId('6836e3f259bf1d899e6c4bd4')
}
todo> db.todo.insertOne({ "task": "listen to a podcast", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "not done", "reminder": "yes" } )
{
  acknowledged: true,
  insertedId: ObjectId('6836e48d59bf1d899e6c4bd5')
}
todo> db.todo.updateMany({{status : 'done'},{$set : {status:true}}})
Uncaught:
SyntaxError: Unexpected token (1:20)

> 1 | db.todo.updateMany({{status : 'done'},{$set : {status:true}}})
    |                     ^
  2 |

todo> db.todo.updateMany({{status : 'done'},{$set : {status:true}}}})
Uncaught:
SyntaxError: Unexpected token (1:20)

> 1 | db.todo.updateMany({{status : 'done'},{$set : {status:true}}}})
    |                     ^
  2 |

todo> db.todo.updateMany({status : 'done'},{$set : {status:true})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:58)

> 1 | db.todo.updateMany({status : 'done'},{$set : {status:true})
    |                                                           ^
  2 |

todo> db.todo.updateMany({status : 'done'},{$set : {status:true}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 4,
  modifiedCount: 4,
  upsertedCount: 0
}
todo> db.todo.updateMany({status : 'done'},{$set : {status:true}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
todo> db.todo.updateMany(
... {status : "not done"},
... {$set :{status : false}}
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
todo> db.todo.find()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: true,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: true,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: true,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: true,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes'
  }
]
todo> db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )
{
  acknowledged: true,
  insertedId: ObjectId('6836e64d59bf1d899e6c4bd6')
}
todo> db.todo.insertMany(
... [{"task": "put petrol", "category": "must do", "date": new Date(), "deadline": "23-05-2025", "status": false, "reminder": "no"},
... {"task": "buy fruits", "category": "must do", "date": new Date(), "deadline": "30-05-2025", "status": true, "reminder": "yes"},
... {"task": "jump rops for 30 min", "category": "physical health", "date": new Date(), "deadline": "26-05-2025", "status": false, "reminder": "no"}
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6836e74a59bf1d899e6c4bd7'),
    '1': ObjectId('6836e74a59bf1d899e6c4bd8'),
    '2': ObjectId('6836e74a59bf1d899e6c4bd9')
  }
}
todo> db.todo.countDocuments()
10
todo> db.todo.find()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: true,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: true,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: true,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: true,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e64d59bf1d899e6c4bd6'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:32:45.318Z'),
    deadline: '21-05-2025',
    status: 'done',
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd7'),
    task: 'put petrol',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '23-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd8'),
    task: 'buy fruits',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '30-05-2025',
    status: true,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd9'),
    task: 'jump rops for 30 min',
    category: 'physical health',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no'
  }
]
todo>

todo>

todo>

todo> history
[Function (anonymous)]
todo> history()
[
  'db',
  'show databases;',
  'use school',
  'show db;',
  'show db',
  'show',
  'show collections',
  'students()',
  'db.school.find("age")',
  'db.school.find()',
  'db.school.find().pretty()',
  'db.school.countDocuments()',
  'show db;',
  'use students',
  'db.school.countDocuments()',
  'db.students.countDocuments()',
  'students.countDocuments()',
  'db.school.find().pretty()',
  'db.students.find().pretty()',
  'db.students.find()',
  'use db',
  'use school;',
  "db['students'].find(_)",
  "db['students'].find()",
  "db['students'].find().pretty()",
  "db['students'].find('age' : {$gt 18})",
  "db['students'].find(age : {$gt 18})",
  "db['students'].find({age : {$gt 18}})",
  "db['students'].find({age : {$gt: 18}})",
  'db.students.find({age : {$gt : 20}})',
  "db.students.find({gender:{$in:'Female'}})",
  "db.students.find({gender:{$in:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  'db.students.countDocuments({age : {$gt : 20}})',
  "db.students.countDocuments({gender:{$nin:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  "db.students.find({department:{$in :['Art']}})",
  "db.students.find({department:{$in :['Art','English']}})",
  "db.students.find({department:{$nin :['Art','English']}})",
  'db.students.find($and )',
  'db.students.find({$and : ([{age:22\x1D},{year:2}]) })',
  'db.students.find({$and : ([{age:22\x1D},{year:2}])',
  'db.students.find({$and : [{age: 22},{year:2}]})',
  'db.students.find({$or : [{age: 22},{year:2}]})',
  "db.students.find({gender : {$exists : 'Male'}})",
  'db.students.find({year : {$type : int}})',
  'db.students.find({year : {$type : "number"}})',
  'db.students.find({year : {$type : "array"}})',
  "db.students.find({grades : {$all : ['cs','math']}})",
  'db.students.find({grades : {$all : ["cs"]}})',
  'db.students.find({grades : {$all : ["cs","math","networking"]}})',
  'use todo',
  'db.todo.insertOne( {} ;',
  'db.todo.insertOne( { "task": "go gym", "category": "physical health", "date": new Date(), "deadline": "30-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne( { "task": "read book", "category": "mental health", "date": new Date(), "deadline": "30-05-2025", "status": "not done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "speak to friend", "category": "enjoyment", "date": new Date(), "deadline": "26-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "play CoC game", "category": "enjoyment", "date": new Date(), "deadline": "28-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne({ "task": "listen to a podcast", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "not done", "reminder": "yes" } )',
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}})",
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}}})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true}})",
  'db.todo.updateMany( { status: "not done" }, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertMany( [{ "task": "put petrol", "category": "must do", "date": new Date(), "deadline": "23-05-2025", "status": false, "reminder": "no" }, { "task": "buy fruits", "category": "must do", "date": new Date(), "deadline": "30-05-2025", "status": true, "reminder": "yes" }, { "task": "jump rops for 30 min", "category": "physical health", "date": new Date(), "deadline": "26-05-2025", "status": false, "reminder": "no" }] )',
  'db.todo.countDocuments()',
  'db.todo.find()',
  'history'
]
todo>

todo>

todo>

todo>

todo>

todo> db.collection.updateMany(
...   {},
...   { $set: { active: false } }
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
todo> db.todo.updateMany(
... {},
... {$set : {status : false}}
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 6,
  upsertedCount: 0
}
todo> db.todo.find()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e64d59bf1d899e6c4bd6'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:32:45.318Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd7'),
    task: 'put petrol',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '23-05-2025',
    status: false,
    reminder: 'no'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd8'),
    task: 'buy fruits',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd9'),
    task: 'jump rops for 30 min',
    category: 'physical health',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no'
  }
]
todo> db.update
db.updateUser  db.updateRole

todo> db.todo.updateOne(
... {_id : "6836e74a59bf1d899e6c4bd9"},
... {$set : {status : true})
Uncaught:
SyntaxError: Unexpected token, expected "," (3:23)

  1 | db.todo.updateOne(
  2 | {_id : "6836e74a59bf1d899e6c4bd9"},
> 3 | {$set : {status : true})
    |                        ^
  4 |

todo> db.todo.updateOne( {_id : ObjectId"6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:34)

> 1 | db.todo.updateOne( {_id : ObjectId"6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})
    |                                   ^
  2 |

todo> db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:88)

> 1 | db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true})
    |                                                                                         ^
  2 |

todo> db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
todo>

todo>

todo>

todo>

todo> db.todo.updateMany(
... {},
... {$set : {"resent_update":new Date()}}
... )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 10,
  upsertedCount: 0
}
todo> history()
[
  'db',
  'show databases;',
  'use school',
  'show db;',
  'show db',
  'show',
  'show collections',
  'students()',
  'db.school.find("age")',
  'db.school.find()',
  'db.school.find().pretty()',
  'db.school.countDocuments()',
  'show db;',
  'use students',
  'db.school.countDocuments()',
  'db.students.countDocuments()',
  'students.countDocuments()',
  'db.school.find().pretty()',
  'db.students.find().pretty()',
  'db.students.find()',
  'use db',
  'use school;',
  "db['students'].find(_)",
  "db['students'].find()",
  "db['students'].find().pretty()",
  "db['students'].find('age' : {$gt 18})",
  "db['students'].find(age : {$gt 18})",
  "db['students'].find({age : {$gt 18}})",
  "db['students'].find({age : {$gt: 18}})",
  'db.students.find({age : {$gt : 20}})',
  "db.students.find({gender:{$in:'Female'}})",
  "db.students.find({gender:{$in:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  'db.students.countDocuments({age : {$gt : 20}})',
  "db.students.countDocuments({gender:{$nin:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  "db.students.find({department:{$in :['Art']}})",
  "db.students.find({department:{$in :['Art','English']}})",
  "db.students.find({department:{$nin :['Art','English']}})",
  'db.students.find($and )',
  'db.students.find({$and : ([{age:22\x1D},{year:2}]) })',
  'db.students.find({$and : ([{age:22\x1D},{year:2}])',
  'db.students.find({$and : [{age: 22},{year:2}]})',
  'db.students.find({$or : [{age: 22},{year:2}]})',
  "db.students.find({gender : {$exists : 'Male'}})",
  'db.students.find({year : {$type : int}})',
  'db.students.find({year : {$type : "number"}})',
  'db.students.find({year : {$type : "array"}})',
  "db.students.find({grades : {$all : ['cs','math']}})",
  'db.students.find({grades : {$all : ["cs"]}})',
  'db.students.find({grades : {$all : ["cs","math","networking"]}})',
  'use todo',
  'db.todo.insertOne( {} ;',
  'db.todo.insertOne( { "task": "go gym", "category": "physical health", "date": new Date(), "deadline": "30-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne( { "task": "read book", "category": "mental health", "date": new Date(), "deadline": "30-05-2025", "status": "not done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "speak to friend", "category": "enjoyment", "date": new Date(), "deadline": "26-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "play CoC game", "category": "enjoyment", "date": new Date(), "deadline": "28-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne({ "task": "listen to a podcast", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "not done", "reminder": "yes" } )',
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}})",
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}}})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true}})",
  'db.todo.updateMany( { status: "not done" }, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertMany( [{ "task": "put petrol", "category": "must do", "date": new Date(), "deadline": "23-05-2025", "status": false, "reminder": "no" }, { "task": "buy fruits", "category": "must do", "date": new Date(), "deadline": "30-05-2025", "status": true, "reminder": "yes" }, { "task": "jump rops for 30 min", "category": "physical health", "date": new Date(), "deadline": "26-05-2025", "status": false, "reminder": "no" }] )',
  'db.todo.countDocuments()',
  'db.todo.find()',
  'history',
  'history()',
  'db.collection.updateMany(',
  '  {},',
  '  { $set: { active: false } }',
  ')',
  'db.todo.updateMany( {}, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.updateOne( {_id : "6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId"6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true}})',
  'db.todo.updateMany( {}, { $set: { "resent_update": new Date() } } )'
]
todo> db.todo.find()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e64d59bf1d899e6c4bd6'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:32:45.318Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd7'),
    task: 'put petrol',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '23-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd8'),
    task: 'buy fruits',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd9'),
    task: 'jump rops for 30 min',
    category: 'physical health',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '26-05-2025',
    status: true,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z')
  }
]
todo> db.todo.updateMany( {}, { $set: { "priority" : 'high' } } )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 10,
  upsertedCount: 0
}
todo> db.todo.updateMany( {}, { $set: { "priority" : 'urgent' } } )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 10,
  upsertedCount: 0
}
todo> db.todo.updateMany( {}, { $set: { "priority" : 'medium' } } )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 10,
  upsertedCount: 0
}
todo>

todo>

todo>

todo>

todo>

todo> db.runCommand({
...   collMod: "todo",
...   validator: {
...     $jsonSchema: {
...       bsonType: "object",
...       properties: {
...         priority: {
...           enum: ["low", "medium", "high"],
...           description: "priority must be one of: low, medium, high"
...         }
...       }
...     }
...   },
...   validationLevel: "moderate",  // validate new/updated documents only
...   validationAction: "error"     // reject invalid inserts/updates
... })
...
{ ok: 1 }
todo> db.todo.find()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e64d59bf1d899e6c4bd6'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:32:45.318Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd7'),
    task: 'put petrol',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '23-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd8'),
    task: 'buy fruits',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd9'),
    task: 'jump rops for 30 min',
    category: 'physical health',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '26-05-2025',
    status: true,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  }
]
todo> db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes","priority" : "high" } )
{
  acknowledged: true,
  insertedId: ObjectId('6836ed9d59bf1d899e6c4bda')
}
todo> db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes","priority" : "urgent" } )
Uncaught:
MongoServerError: Document failed validation
Additional information: {
  failingDocumentId: ObjectId('6836eda559bf1d899e6c4bdb'),
  details: {
    operatorName: '$jsonSchema',
    schemaRulesNotSatisfied: [
      {
        operatorName: 'properties',
        propertiesNotSatisfied: [
          {
            propertyName: 'priority',
            description: 'priority must be one of: low, medium, high',
            details: [
              {
                operatorName: 'enum',
                specifiedAs: { enum: [ 'low', 'medium', 'high' ] },
                reason: 'value was not found in enum',
                consideredValue: 'urgent'
              }
            ]
          }
        ]
      }
    ]
  }
}
todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo>

todo> history()
[
  'db',
  'show databases;',
  'use school',
  'show db;',
  'show db',
  'show',
  'show collections',
  'students()',
  'db.school.find("age")',
  'db.school.find()',
  'db.school.find().pretty()',
  'db.school.countDocuments()',
  'show db;',
  'use students',
  'db.school.countDocuments()',
  'db.students.countDocuments()',
  'students.countDocuments()',
  'db.school.find().pretty()',
  'db.students.find().pretty()',
  'db.students.find()',
  'use db',
  'use school;',
  "db['students'].find(_)",
  "db['students'].find()",
  "db['students'].find().pretty()",
  "db['students'].find('age' : {$gt 18})",
  "db['students'].find(age : {$gt 18})",
  "db['students'].find({age : {$gt 18}})",
  "db['students'].find({age : {$gt: 18}})",
  'db.students.find({age : {$gt : 20}})',
  "db.students.find({gender:{$in:'Female'}})",
  "db.students.find({gender:{$in:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  'db.students.countDocuments({age : {$gt : 20}})',
  "db.students.countDocuments({gender:{$nin:['Female']}})",
  "db.students.countDocuments({gender:{$in:['Female']}})",
  "db.students.find({department:{$in :['Art']}})",
  "db.students.find({department:{$in :['Art','English']}})",
  "db.students.find({department:{$nin :['Art','English']}})",
  'db.students.find($and )',
  'db.students.find({$and : ([{age:22\x1D},{year:2}]) })',
  'db.students.find({$and : ([{age:22\x1D},{year:2}])',
  'db.students.find({$and : [{age: 22},{year:2}]})',
  'db.students.find({$or : [{age: 22},{year:2}]})',
  "db.students.find({gender : {$exists : 'Male'}})",
  'db.students.find({year : {$type : int}})',
  'db.students.find({year : {$type : "number"}})',
  'db.students.find({year : {$type : "array"}})',
  "db.students.find({grades : {$all : ['cs','math']}})",
  'db.students.find({grades : {$all : ["cs"]}})',
  'db.students.find({grades : {$all : ["cs","math","networking"]}})',
  'use todo',
  'db.todo.insertOne( {} ;',
  'db.todo.insertOne( { "task": "go gym", "category": "physical health", "date": new Date(), "deadline": "30-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne( { "task": "read book", "category": "mental health", "date": new Date(), "deadline": "30-05-2025", "status": "not done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "speak to friend", "category": "enjoyment", "date": new Date(), "deadline": "26-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.insertOne( { "task": "play CoC game", "category": "enjoyment", "date": new Date(), "deadline": "28-05-2025", "status": "done", "reminder": "no" } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertOne({ "task": "listen to a podcast", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "not done", "reminder": "yes" } )',
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}})",
  "db.todo.updateMany({{status : 'done'},{$set : {status:true}}}})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true})",
  "db.todo.updateMany({status : 'done'},{$set : {status:true}})",
  'db.todo.updateMany( { status: "not done" }, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes" } )',
  'db.todo.insertMany( [{ "task": "put petrol", "category": "must do", "date": new Date(), "deadline": "23-05-2025", "status": false, "reminder": "no" }, { "task": "buy fruits", "category": "must do", "date": new Date(), "deadline": "30-05-2025", "status": true, "reminder": "yes" }, { "task": "jump rops for 30 min", "category": "physical health", "date": new Date(), "deadline": "26-05-2025", "status": false, "reminder": "no" }] )',
  'db.todo.countDocuments()',
  'db.todo.find()',
  'history',
  'history()',
  'db.collection.updateMany(',
  '  {},',
  '  { $set: { active: false } }',
  ')',
  'db.todo.updateMany( {}, { $set: { status: false } } )',
  'db.todo.find()',
  'db.todo.updateOne( {_id : "6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId"6836e74a59bf1d899e6c4bd9"}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true})',
  'db.todo.updateOne( {_id : ObjectId("6836e74a59bf1d899e6c4bd9")}, {$set : {status : true}})',
  'db.todo.updateMany( {}, { $set: { "resent_update": new Date() } } )',
  'history()',
  'db.todo.find()',
  `db.todo.updateMany( {}, { $set: { "priority" : 'high' } } )`,
  `db.todo.updateMany( {}, { $set: { "priority" : 'urgent' } } )`,
  `db.todo.updateMany( {}, { $set: { "priority" : 'medium' } } )`,
  'db.runCommand({',
  '  collMod: "todo",',
  '  validator: {',
  '    $jsonSchema: {',
  '      bsonType: "object",',
  '      properties: {',
  '        priority: {',
  '          enum: ["low", "medium", "high"],',
  '          description: "priority must be one of: low, medium, high"',
  '        }',
  '      }',
  '    }',
  '  },',
  '  validationLevel: "moderate",  // validate new/updated documents only',
  '  validationAction: "error"     // reject invalid inserts/updates',
  '})',
  'db.todo.find()',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes","priority" : "high" } )',
  'db.todo.insertOne({ "task": "read for test", "category": "career", "date": new Date(), "deadline": "21-05-2025", "status": "done", "reminder": "yes","priority" : "urgent" } )'
]
todo>

todo> db.todo.countDocuments()
11
todo> db.todo.find().sort()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e64d59bf1d899e6c4bd6'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:32:45.318Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd7'),
    task: 'put petrol',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '23-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd8'),
    task: 'buy fruits',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd9'),
    task: 'jump rops for 30 min',
    category: 'physical health',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '26-05-2025',
    status: true,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836ed9d59bf1d899e6c4bda'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T11:03:57.710Z'),
    deadline: '21-05-2025',
    status: 'done',
    reminder: 'yes',
    priority: 'high'
  }
]
todo> db.todo.find().sort()
[
  {
    _id: ObjectId('6836e1ae59bf1d899e6c4bd0'),
    task: 'go gym',
    category: 'physical health',
    date: ISODate('2025-05-28T10:13:02.910Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e1e059bf1d899e6c4bd1'),
    task: 'read book',
    category: 'mental health',
    date: ISODate('2025-05-28T10:13:52.506Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e21e59bf1d899e6c4bd2'),
    task: 'speak to friend',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:14:54.022Z'),
    deadline: '26-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e23759bf1d899e6c4bd3'),
    task: 'play CoC game',
    category: 'enjoyment',
    date: ISODate('2025-05-28T10:15:19.223Z'),
    deadline: '28-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e3f259bf1d899e6c4bd4'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:22:42.146Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e48d59bf1d899e6c4bd5'),
    task: 'listen to a podcast',
    category: 'career',
    date: ISODate('2025-05-28T10:25:17.226Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e64d59bf1d899e6c4bd6'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T10:32:45.318Z'),
    deadline: '21-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd7'),
    task: 'put petrol',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '23-05-2025',
    status: false,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd8'),
    task: 'buy fruits',
    category: 'must do',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '30-05-2025',
    status: false,
    reminder: 'yes',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836e74a59bf1d899e6c4bd9'),
    task: 'jump rops for 30 min',
    category: 'physical health',
    date: ISODate('2025-05-28T10:36:58.568Z'),
    deadline: '26-05-2025',
    status: true,
    reminder: 'no',
    resent_update: ISODate('2025-05-28T10:51:37.871Z'),
    priority: 'medium'
  },
  {
    _id: ObjectId('6836ed9d59bf1d899e6c4bda'),
    task: 'read for test',
    category: 'career',
    date: ISODate('2025-05-28T11:03:57.710Z'),
    deadline: '21-05-2025',
    status: 'done',
    reminder: 'yes',
    priority: 'high'
  }
]
todo>

todo>

todo>

todo>

todo>

todo>

todo> db.todo.updateMany( {}, { $set: { "duedate" : new Date()} } )
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 11,
  modifiedCount: 11,
  upsertedCount: 0
}
todo> db.todo.find(
... {duedate : {$in : Date()}}
... )
MongoServerError[BadValue]: $in needs an array
todo> db.todo.find( { duedate: { $in: [Date()] } } )

todo> db.todo.find( { duedate: { $eq: Date() } } )

todo> db.todo.find( { duedate: { $eq: new Date() } } )

todo>
